package ui.screen.server

import androidx.compose.animation.AnimatedVisibility
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.ColumnScope
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.AlertDialog
import androidx.compose.material.Card
import androidx.compose.material.DropdownMenu
import androidx.compose.material.DropdownMenuItem
import androidx.compose.material.ExperimentalMaterialApi
import androidx.compose.material.OutlinedTextField
import androidx.compose.material.Switch
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.rounded.Power
import androidx.compose.material.icons.rounded.PowerOff
import androidx.compose.material.icons.rounded.Upload
import androidx.compose.material.icons.rounded.WarningAmber
import androidx.compose.material3.Button
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateListOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.focus.FocusRequester
import androidx.compose.ui.focus.focusRequester
import androidx.compose.ui.focus.onFocusChanged
import androidx.compose.ui.platform.LocalFocusManager
import androidx.compose.ui.unit.dp
import data.server.Server
import lang.getString
import manager.DatapackManager
import mc.WorldType
import ui.component.UnsavedChangesCard
import ui.component.WorldNotGeneratedCard
import ui.dialog.FilePickerDialog
import ui.element.CardWithIcon
import ui.theme.onSuccessContainer
import ui.theme.successContainer
import utils.toComposeImageBitmap
import java.nio.file.FileAlreadyExistsException

@ExperimentalMaterialApi
@Composable
fun ColumnScope.ServerWorld(server: Server) {
    val worldProperties = server.worldProperties
    var worldGenerated by remember { mutableStateOf(server.isWorldGenerated) }

    var modified by remember { mutableStateOf(false) }
    var needsRestart by remember { mutableStateOf(false) }

    var worldSeed by remember { mutableStateOf(worldProperties.worldSeed) }
    var worldType by remember { mutableStateOf(worldProperties.worldType) }
    var worldTypeCustom by remember { mutableStateOf(worldProperties.worldTypeCustom) }
    var generateStructures by remember { mutableStateOf(worldProperties.generateStructures) }
    var enableNether by remember { mutableStateOf(worldProperties.enableNether) }

    val worldTypeFocusRequester = remember { FocusRequester() }

    fun checkForChanges() {
        modified = worldSeed != worldProperties.worldSeed ||
                worldType != worldProperties.worldType ||
                worldTypeCustom != worldProperties.worldTypeCustom ||
                generateStructures != worldProperties.generateStructures ||
                enableNether != worldProperties.enableNether
    }

    Column(
        modifier = Modifier
            .verticalScroll(state = rememberScrollState())
            .padding(top = 8.dp, bottom = 8.dp, start = 4.dp, end = 8.dp)
            .weight(1f),
    ) {
        if (!worldGenerated)
            WorldNotGeneratedCard(server) { worldGenerated = true }
        OutlinedTextField(
            worldSeed,
            { worldSeed = it; checkForChanges() },
            maxLines = 1,
            singleLine = true,
            enabled = !worldGenerated,
            readOnly = !worldGenerated,
            label = { Text(getString("form-server-world-seed")) },
            modifier = Modifier.fillMaxSize().padding(vertical = 8.dp),
        )
        Row(
            modifier = Modifier.fillMaxWidth(),
        ) {
            val focusManager = LocalFocusManager.current
            var worldTypeDropdownExpanded by remember { mutableStateOf(false) }

            OutlinedTextField(
                getString(worldType.stringResourceKey),
                { },
                maxLines = 1,
                singleLine = true,
                readOnly = true,
                enabled = !worldGenerated,
                label = { Text(getString("form-server-world-type")) },
                modifier = Modifier
                    .padding(
                        end = if (worldType == WorldType.CUSTOM) 8.dp else 0.dp,
                        top = 8.dp,
                        bottom = 8.dp
                    )
                    .weight(1f)
                    .focusRequester(worldTypeFocusRequester)
                    .onFocusChanged { if (it.isFocused) worldTypeDropdownExpanded = true },
            )
            DropdownMenu(
                worldTypeDropdownExpanded,
                modifier = Modifier.background(MaterialTheme.colorScheme.surfaceVariant),
                onDismissRequest = {
                    worldTypeDropdownExpanded = false
                    focusManager.clearFocus()
                },
            ) {
                WorldType
                    .values()
                    .forEach { type ->
                        DropdownMenuItem(
                            enabled = !worldGenerated,
                            onClick = { worldType = type; worldTypeDropdownExpanded = false }
                        ) { Text(getString(type.stringResourceKey)) }
                    }
            }
            AnimatedVisibility(visible = worldType == WorldType.CUSTOM) {
                OutlinedTextField(
                    worldTypeCustom,
                    { worldTypeCustom = it; checkForChanges() },
                    maxLines = 1,
                    singleLine = true,
                    label = { Text(getString("form-server-world-type-custom")) },
                    modifier = Modifier.weight(1f).padding(vertical = 8.dp),
                )
            }
        }
        Row(
            modifier = Modifier.fillMaxWidth(),
        ) {
            Row(
                modifier = Modifier.weight(1f),
                verticalAlignment = Alignment.CenterVertically,
            ) {
                Switch(
                    checked = generateStructures,
                    onCheckedChange = { generateStructures = it; checkForChanges() },
                )
                Text(
                    getString("form-server-world-structures"),
                    modifier = Modifier.weight(1f),
                )
            }
            Row(
                modifier = Modifier.weight(1f),
                verticalAlignment = Alignment.CenterVertically,
            ) {
                Switch(
                    checked = enableNether,
                    onCheckedChange = { enableNether = it; checkForChanges() },
                )
                Text(
                    getString("form-server-world-nether"),
                    modifier = Modifier.weight(1f),
                )
            }
        }
        Card(
            modifier = Modifier.fillMaxWidth(),
            backgroundColor = MaterialTheme.colorScheme.surfaceVariant,
            contentColor = MaterialTheme.colorScheme.onSurfaceVariant,
        ) {
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(8.dp),
            ) {
                val datapacks =
                    mutableStateListOf(*DatapackManager.getDatapacks(server).toTypedArray())

                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    modifier = Modifier.fillMaxWidth(),
                ) {
                    var showingDatapackAddDropdown by remember { mutableStateOf(false) }
                    var showingZipPickerDialog by remember { mutableStateOf(false) }
                    var showingErrorDialog: Pair<String, String>? by remember {
                        mutableStateOf(
                            null
                        )
                    }

                    // ZIP Picker dialog
                    if (showingZipPickerDialog)
                        FilePickerDialog(
                            onCloseRequest = { files ->
                                showingZipPickerDialog = false
                                if (files.isNotEmpty())
                                    DatapackManager
                                        .loadDatapack(files[0], server.version.id)
                                        ?.let {
                                            try {
                                                DatapackManager.addToServer(server, it)
                                            } catch (e: FileAlreadyExistsException) {
                                                showingErrorDialog =
                                                    getString("dialog-datapack-already-exists-title") to
                                                            getString("dialog-datapack-already-exists-message")
                                                null
                                            }
                                        }
                                        ?.let { datapacks.add(it) }
                                        ?: run {
                                            showingErrorDialog =
                                                getString("dialog-datapack-invalid-title") to
                                                        getString("dialog-datapack-invalid-message")
                                        }
                            },
                            title = getString("picker-datapack-title"),
                            allowedExtensions = listOf("*.zip"),
                        )

                    // Error dialog for invalid datapacks
                    if (showingErrorDialog != null)
                        AlertDialog(
                            onDismissRequest = { showingErrorDialog = null },
                            confirmButton = {
                                Button(
                                    onClick = { showingErrorDialog = null },
                                ) { Text(getString("action-okay")) }
                            },
                            title = { Text(showingErrorDialog?.first ?: "N/A") },
                            text = { Text(showingErrorDialog?.second ?: "N/A") },
                        )

                    Column(
                        modifier = Modifier.weight(1f),
                    ) {
                        Text(
                            modifier = Modifier.fillMaxWidth(),
                            text = getString("form-server-world-datapacks"),
                            style = MaterialTheme.typography.labelLarge,
                        )
                        Text(
                            modifier = Modifier.fillMaxWidth(),
                            text = getString("form-drag-and-drop"),
                            style = MaterialTheme.typography.labelSmall,
                        )
                    }
                    IconButton(
                        onClick = { showingDatapackAddDropdown = true },
                    ) {
                        Icon(Icons.Rounded.Upload, getString("form-server-world-datapacks-add"))
                    }
                    DropdownMenu(
                        showingDatapackAddDropdown,
                        { showingDatapackAddDropdown = false },
                        modifier = Modifier.background(MaterialTheme.colorScheme.surfaceVariant),
                    ) {
                        mapOf(
                            "form-server-world-datapacks-add-zip" to {
                                showingZipPickerDialog = true
                            },
                            "form-server-world-datapacks-add-vanilla-tweaks" to null,
                            "form-server-world-datapacks-add-planet-minecraft" to null,
                        ).forEach { (stringResource, callback) ->
                            DropdownMenuItem(
                                onClick = {
                                    callback?.invoke(); showingDatapackAddDropdown = false
                                },
                                enabled = callback != null,
                            ) { Text(getString(stringResource)) }
                        }
                    }
                }

                datapacks.forEach { datapack ->
                    var datapackEnabled by remember { mutableStateOf(datapack.enabled) }
                    val image = datapack.image?.toComposeImageBitmap()

                    Card(
                        modifier = Modifier
                            .padding(8.dp)
                            .fillMaxWidth(),
                        backgroundColor = MaterialTheme.colorScheme.surfaceVariant,
                        contentColor = MaterialTheme.colorScheme.onSurfaceVariant,
                        elevation = 5.dp,
                    ) {
                        Row(
                            modifier = Modifier.fillMaxWidth(),
                        ) {
                            if (image != null)
                                Image(
                                    image,
                                    datapack.description,
                                    modifier = Modifier.size(64.dp)
                                )
                            Column(
                                modifier = Modifier.fillMaxWidth(),
                            ) {
                                Text(
                                    datapack.coloredDescription,
                                    modifier = Modifier.fillMaxWidth()
                                        .padding(start = 8.dp, top = 4.dp),
                                    style = MaterialTheme.typography.titleMedium,
                                )
                                Text(
                                    getString(
                                        "form-server-world-datapack-version",
                                        datapack.version ?: "N/A",
                                    ),
                                    modifier = Modifier.fillMaxWidth()
                                        .padding(start = 8.dp, top = 4.dp),
                                    style = MaterialTheme.typography.labelLarge,
                                )
                                Row(
                                    modifier = Modifier.fillMaxWidth(),
                                ) {
                                    Spacer(Modifier.weight(1f))
                                    IconButton(
                                        enabled = worldGenerated,
                                        onClick = {
                                            datapackEnabled = datapack.toggle(server).enabled
                                        },
                                    ) {
                                        if (datapackEnabled)
                                            Icon(Icons.Rounded.Power, getString("cd-turn-off"))
                                        else
                                            Icon(
                                                Icons.Rounded.PowerOff,
                                                getString("cd-turn-on")
                                            )
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    UnsavedChangesCard(modified)
    Row(
        horizontalArrangement = Arrangement.End,
        modifier = Modifier.fillMaxWidth(),
    ) {
        AnimatedVisibility(modified) {
            OutlinedButton(
                modifier = Modifier.padding(horizontal = 4.dp),
                onClick = {
                    worldSeed = worldProperties.worldSeed
                    worldType = worldProperties.worldType
                    worldTypeCustom = worldProperties.worldTypeCustom
                    generateStructures = worldProperties.generateStructures
                    enableNether = worldProperties.enableNether
                    checkForChanges()
                },
            ) {
                Text(getString("action-undo"))
            }
        }

        Button(
            modifier = Modifier.padding(horizontal = 4.dp),
            enabled = modified,
            onClick = {
                // TODO: Save changes
            },
        ) {
            Text(getString("action-save"))
        }
    }
}
